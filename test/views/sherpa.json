{
  "settings": {
    "title": "sherpa.",
    "repo": "https://github.com/modeset/sherpa/",
    "output_dir": "./test/views/",
    "layout_dir": "./lib/layouts/",
    "layout_template": "layout.mustache",
    "default_section_template": "raw.mustache"
  },
  "overview": [
    {
      "raw": "\n# sherpa\n\nDocumentation generator for various languages.\n\n## What it contains\n\n### Sherpa\nSherpa parses files and outputs a json file with relevant sections converted from markdown to html. It can be loaded from a Rails app, Sinatra app or from the command line. It should accept a list of files (globbed, yaml, or json), output directory/filename, overview file. The contents of Sherpa looks like:\n\n- Builder: accepts an array of files and outputs json\n- Parser: parses a file for sherpa comment blocks\n- Renderer: renders sections to markdown\n- Utilities: helpers for stripping comments, determining block types, languages, etc..\n\nTheoretically, this json file can be used by any sort of renderer. A user could write their own layout engine, or send it to something like [mad](https://github.com/visionmedia/mad) for man style pages.\n\n\n### Sherpa Layouts\nSherpa layouts utilize a configuration file to output markup from Sherpa parsed files. It needs to augment the returned ruby object from sherpa and merge in the settings from the configuration file (`json|yaml`) which describes various properties associated with rendering layouts (see configuration options below). It then renders the augmented configuration file to a mustache template based off of mustache sections.\n\n- Configuration File: `json|yaml` file applicable for layouts\n- Builder: reads the configuration file and sends out files to Sherpa's parser/renderer\n- Layout Renderer: renders the layout to sections and finally the page\n- Layouts:\n  - `layout.mustache`: the shell page\n  - `default_section.mustache`: the default section used if there is no default `language.mustache`\n  - `language.mustache`: the default section used by most templates for a given language (include 1 for each language type)\n  - `alternatives.mustache`: a few alternative sections (mainly for the style guides)\n\n\n## Use Cases\n\n### Sherpa no layout\nTypically from the command line, but can come from Rails/Sinatra\n\n- Determine if the files are globbed or coming from a `json|yaml` file\n- If coming from a configuration file, load that file and convert into an array of files\n- Unless not set, see if there is a README file in the base directory to use as an overview\n- Send each file out to the parser\n  - Parser reads each file line by line\n  - Once it comes to a sherpa block (denoted with `//~`)\n  - Add the current block to a `@blocks` array (there can be multiple sherpa blocks within a single file)\n  - Create `raw` key to store the entire comment block\n  - Create `filename` key to store the current file name (stripped as `parent_dir/filename`)\n  - Create a `current_key` as a summary` key to store the initial description\n  - Continue and strip off the comment markers\n  - Trim left spacing unless in an `examples` or `usage` block (need to maintain formatting for markdown conversion)\n  - Determine if the current line is a header (if line ends in `:` it gets converted to an `h3`)\n  - If it is a header, set a new `current_key` as the name of the header\n  - Determine if the `current_key` is `examples`, this will get stored in a separate object for style guides\n  - If the line is under the `examples` block, format and store it for rendering in both pre and inline markup\n  - Store the modified comment line in both the `raw` key and `current_key`\n  - Continue and scrub next line or clean the examples for further formatting\n  - Once complete, look for other sherpa blocks, if found repeat otherwise return the `@blocks` array\n- Send out the current file's comment blocks to the `Renderer`\n- The `Renderer` parses each key and converts to markdown using redcarpet unless it's the `raw` or `examples` key\n- `Renderer` returns the existing block back to push into an array\n- Add a few other settings to the object: publication time, publisher, etc..\n- Once complete for each file, Sherpa converts the object to json and saves the file\n\n### Sherpa with Layout\nTypically from Rails/Sinatra, but could come from the command line as well\n\n- Load the configuration `json|yaml` file which contains the settings related to rendering a layout\n- Set defaults for anything related to the configuration file\n- Find the file list within the configuration file and send to Sherpa for parsing (Sherpa only returns the parsed ruby object)\n- Merge the configuration file and the sherpa output (mainly creating templates associated with files and any other relevant information)\n- Render each section with their associated template (templates should be cached once read in)\n- Render and write the layout to an html file\n- Optionally save the raw json file as well\n\n\n## Configuration file for layouts\n\nThe configuration file is only applicable when generating layouts. Sherpa can run without it based on a listing of files and a few other properties.\n\n- Top level objects for setting defaults across all _pages_\n  - `layout_dir`: defaults to a layout dir included with the gem\n  - `layout_file`: defaults to a `layout.mustache` included with the gem\n  - `default_section_template`: defaults to a `layout.mustache` included with the gem\n  - `output_dir`: not sure where to store this\n- Broken into pages `\"page\":\"styles\"`\n- Each page represents a language (cs|js, sass|scss|css, html, ruby, etc..)\n- Each page object has: (navigation name inferred from `\"page\"`)\n  - `base_dir`: no default\n  - `overview_file`: based off the `readme.md` file located in the `base_dir`\n  - `layout_dir`: overrides top level property\n  - `layout_file`: overrides top level property\n  - `default_section_template`: overrides top level property\n  - `output_dir`: overrides top level property\n  - `section`: used for navigation items\n    - `section.name`: navigation category\n    - `section.manifest`: array of `file` and `template` overrides (navigation name inferred from `File.basename`)\n\n## External Dependencies\n\n- `json`\n- `redcarpet`\n- `mustache` (only for layouts)\n\n## Future\n\n- Abstract the Renderer so if someone wants to use Bluecloth, Discount or some other library they can\n- Possibly rewrite in C and use Ruby or Node bindings to make platform and framework agnostic\n\n## Globbing\n\n- .* = all files in directory\n- *.sass = only sass files\n- base/*.sass = only sass files within base\n- base/*.* all files within the base directory\n\n",
      "markup": "<h1>sherpa</h1>\n<br /><p>Documentation generator for various languages.</p>\n<br /><h2>What it contains</h2>\n<br /><h3>Sherpa</h3>\n<br /><p>Sherpa parses files and outputs a json file with relevant sections converted from markdown to html. It can be loaded from a Rails app, Sinatra app or from the command line. It should accept a list of files (globbed, yaml, or json), output directory/filename, overview file. The contents of Sherpa looks like:</p>\n<br /><ul>\n<li>Builder: accepts an array of files and outputs json</li>\n<li>Parser: parses a file for sherpa comment blocks</li>\n<li>Renderer: renders sections to markdown</li>\n<li>Utilities: helpers for stripping comments, determining block types, languages, etc..</li>\n</ul>\n<br /><p>Theoretically, this json file can be used by any sort of renderer. A user could write their own layout engine, or send it to something like <a href=\"https://github.com/visionmedia/mad\">mad</a> for man style pages.</p>\n<br /><h3>Sherpa Layouts</h3>\n<br /><p>Sherpa layouts utilize a configuration file to output markup from Sherpa parsed files. It needs to augment the returned ruby object from sherpa and merge in the settings from the configuration file (<code>json|yaml</code>) which describes various properties associated with rendering layouts (see configuration options below). It then renders the augmented configuration file to a mustache template based off of mustache sections.</p>\n<br /><ul>\n<li>Configuration File: <code>json|yaml</code> file applicable for layouts</li>\n<li>Builder: reads the configuration file and sends out files to Sherpa&#39;s parser/renderer</li>\n<li>Layout Renderer: renders the layout to sections and finally the page</li>\n<li>Layouts:\n<br /><ul>\n<li><code>layout.mustache</code>: the shell page</li>\n<li><code>default_section.mustache</code>: the default section used if there is no default <code>language.mustache</code></li>\n<li><code>language.mustache</code>: the default section used by most templates for a given language (include 1 for each language type)</li>\n<li><code>alternatives.mustache</code>: a few alternative sections (mainly for the style guides)</li>\n</ul></li>\n</ul>\n<br /><h2>Use Cases</h2>\n<br /><h3>Sherpa no layout</h3>\n<br /><p>Typically from the command line, but can come from Rails/Sinatra</p>\n<br /><ul>\n<li>Determine if the files are globbed or coming from a <code>json|yaml</code> file</li>\n<li>If coming from a configuration file, load that file and convert into an array of files</li>\n<li>Unless not set, see if there is a README file in the base directory to use as an overview</li>\n<li>Send each file out to the parser\n<br /><ul>\n<li>Parser reads each file line by line</li>\n<li>Once it comes to a sherpa block (denoted with <code>//~</code>)</li>\n<li>Add the current block to a <code>@blocks</code> array (there can be multiple sherpa blocks within a single file)</li>\n<li>Create <code>raw</code> key to store the entire comment block</li>\n<li>Create <code>filename</code> key to store the current file name (stripped as <code>parent_dir/filename</code>)</li>\n<li>Create a <code>current_key</code> as a summary` key to store the initial description</li>\n<li>Continue and strip off the comment markers</li>\n<li>Trim left spacing unless in an <code>examples</code> or <code>usage</code> block (need to maintain formatting for markdown conversion)</li>\n<li>Determine if the current line is a header (if line ends in <code>:</code> it gets converted to an <code>h3</code>)</li>\n<li>If it is a header, set a new <code>current_key</code> as the name of the header</li>\n<li>Determine if the <code>current_key</code> is <code>examples</code>, this will get stored in a separate object for style guides</li>\n<li>If the line is under the <code>examples</code> block, format and store it for rendering in both pre and inline markup</li>\n<li>Store the modified comment line in both the <code>raw</code> key and <code>current_key</code></li>\n<li>Continue and scrub next line or clean the examples for further formatting</li>\n<li>Once complete, look for other sherpa blocks, if found repeat otherwise return the <code>@blocks</code> array</li>\n</ul></li>\n<li>Send out the current file&#39;s comment blocks to the <code>Renderer</code></li>\n<li>The <code>Renderer</code> parses each key and converts to markdown using redcarpet unless it&#39;s the <code>raw</code> or <code>examples</code> key</li>\n<li><code>Renderer</code> returns the existing block back to push into an array</li>\n<li>Add a few other settings to the object: publication time, publisher, etc..</li>\n<li>Once complete for each file, Sherpa converts the object to json and saves the file</li>\n</ul>\n<br /><h3>Sherpa with Layout</h3>\n<br /><p>Typically from Rails/Sinatra, but could come from the command line as well</p>\n<br /><ul>\n<li>Load the configuration <code>json|yaml</code> file which contains the settings related to rendering a layout</li>\n<li>Set defaults for anything related to the configuration file</li>\n<li>Find the file list within the configuration file and send to Sherpa for parsing (Sherpa only returns the parsed ruby object)</li>\n<li>Merge the configuration file and the sherpa output (mainly creating templates associated with files and any other relevant information)</li>\n<li>Render each section with their associated template (templates should be cached once read in)</li>\n<li>Render and write the layout to an html file</li>\n<li>Optionally save the raw json file as well</li>\n</ul>\n<br /><h2>Configuration file for layouts</h2>\n<br /><p>The configuration file is only applicable when generating layouts. Sherpa can run without it based on a listing of files and a few other properties.</p>\n<br /><ul>\n<li>Top level objects for setting defaults across all <em>pages</em>\n<br /><ul>\n<li><code>layout_dir</code>: defaults to a layout dir included with the gem</li>\n<li><code>layout_file</code>: defaults to a <code>layout.mustache</code> included with the gem</li>\n<li><code>default_section_template</code>: defaults to a <code>layout.mustache</code> included with the gem</li>\n<li><code>output_dir</code>: not sure where to store this</li>\n</ul></li>\n<li>Broken into pages <code>&quot;page&quot;:&quot;styles&quot;</code></li>\n<li>Each page represents a language (cs|js, sass|scss|css, html, ruby, etc..)</li>\n<li>Each page object has: (navigation name inferred from <code>&quot;page&quot;</code>)\n<br /><ul>\n<li><code>base_dir</code>: no default</li>\n<li><code>overview_file</code>: based off the <code>readme.md</code> file located in the <code>base_dir</code></li>\n<li><code>layout_dir</code>: overrides top level property</li>\n<li><code>layout_file</code>: overrides top level property</li>\n<li><code>default_section_template</code>: overrides top level property</li>\n<li><code>output_dir</code>: overrides top level property</li>\n<li><code>section</code>: used for navigation items</li>\n<li><code>section.name</code>: navigation category</li>\n<li><code>section.manifest</code>: array of <code>file</code> and <code>template</code> overrides (navigation name inferred from <code>File.basename</code>)</li>\n</ul></li>\n</ul>\n<br /><h2>External Dependencies</h2>\n<br /><ul>\n<li><code>json</code></li>\n<li><code>redcarpet</code></li>\n<li><code>mustache</code> (only for layouts)</li>\n</ul>\n<br /><h2>Future</h2>\n<br /><ul>\n<li>Abstract the Renderer so if someone wants to use Bluecloth, Discount or some other library they can</li>\n<li>Possibly rewrite in C and use Ruby or Node bindings to make platform and framework agnostic</li>\n</ul>\n<br /><h2>Globbing</h2>\n<br /><ul>\n<li>.* = all files in directory</li>\n<li>*.sass = only sass files</li>\n<li>base/*.sass = only sass files within base</li>\n<li>base/<em>.</em> all files within the base directory</li>\n</ul>\n",
      "title": "Readme",
      "template": "raw.mustache",
      "filepath": "./README.md",
      "base_dir": "./",
      "subnav": [

      ],
      "blocks": [

      ]
    }
  ],
  "test": [
    {
      "raw": "## Font-size\nUse `rems` to insert a font size with a pixel fallback.\nThis showcases how you might create a mixin block.\n\n#### Arguments:\n\n- `$target_px`              - The target font size in pixels\n- `$context:$context_px`    - [_Optional_] The context constraints of the user's base font size\n\n#### Notes:\n\n- **Heads Up!** Make sure not to include the `px`\n\n#### Examples:\n\n    h1\n      +font-size(48)\n",
      "markup": "<h2>Font-size</h2>\n<br /><p>Use <code>rems</code> to insert a font size with a pixel fallback.\nThis showcases how you might create a mixin block.</p>\n<br /><h4>Arguments:</h4>\n<br /><ul>\n<li><code>$target_px</code>              - The target font size in pixels</li>\n<li><code>$context:$context_px</code>    - [<em>Optional</em>] The context constraints of the user&#39;s base font size</li>\n</ul>\n<br /><h4>Notes:</h4>\n<br /><ul>\n<li><strong>Heads Up!</strong> Make sure not to include the <code>px</code></li>\n</ul>\n<br /><h4>Examples:</h4>\n<br /><pre><code>h1\n  +font-size(48)\n</code></pre>\n",
      "title": "Font-size",
      "template": "section.mustache",
      "filepath": "./test/fixtures/sass/mixins/font-size.sass",
      "base_dir": "./test/fixtures/",
      "subnav": [

      ],
      "blocks": [
        {
          "summary": "<h2>Font-size</h2>\n<br /><p>Use <code>rems</code> to insert a font size with a pixel fallback.\nThis showcases how you might create a mixin block.</p>\n",
          "arguments": "<h4>Arguments:</h4>\n<br /><ul>\n<li><code>$target_px</code>              - The target font size in pixels</li>\n<li><code>$context:$context_px</code>    - [<em>Optional</em>] The context constraints of the user&#39;s base font size</li>\n</ul>\n",
          "notes": "<h4>Notes:</h4>\n<br /><ul>\n<li><strong>Heads Up!</strong> Make sure not to include the <code>px</code></li>\n</ul>\n",
          "examples": "<h4>Examples:</h4>\n<br /><pre><code>h1\n  +font-size(48)\n</code></pre>\n",
          "title": "Font-size"
        }
      ]
    },
    {
      "raw": "##  Visibility mixins\n\nMixin            |Params|Usage\n-----------------|------|----------------------------------------------\n`+hidden`        |none  |Totally hidden from screen readers and browsers\n`+shown`         |none  |Reverse the effects of hidden\n`+visuallyhidden`|none  |Only visually hidden, still available to screen readers\n`+visuallyshown` |none  |Reverse the settings applied by `.visuallyhidden`\n`+invisible`     |none  |Hide visually and from screenreaders, but maintain layout\n",
      "markup": "<h2>Visibility mixins</h2>\n<br /><table><thead>\n<tr>\n<th>Mixin</th>\n<th>Params</th>\n<th>Usage</th>\n</tr>\n</thead><tbody>\n<tr>\n<td><code>+hidden</code></td>\n<td>none</td>\n<td>Totally hidden from screen readers and browsers</td>\n</tr>\n<tr>\n<td><code>+shown</code></td>\n<td>none</td>\n<td>Reverse the effects of hidden</td>\n</tr>\n<tr>\n<td><code>+visuallyhidden</code></td>\n<td>none</td>\n<td>Only visually hidden, still available to screen readers</td>\n</tr>\n<tr>\n<td><code>+visuallyshown</code></td>\n<td>none</td>\n<td>Reverse the settings applied by <code>.visuallyhidden</code></td>\n</tr>\n<tr>\n<td><code>+invisible</code></td>\n<td>none</td>\n<td>Hide visually and from screenreaders, but maintain layout</td>\n</tr>\n</tbody></table>\n",
      "title": "Visibility mixins",
      "template": "section.mustache",
      "filepath": "./test/fixtures/sass/visibility.sass",
      "base_dir": "./test/fixtures/",
      "subnav": [

      ],
      "blocks": [
        {
          "summary": "<h2>Visibility mixins</h2>\n<br /><table><thead>\n<tr>\n<th>Mixin</th>\n<th>Params</th>\n<th>Usage</th>\n</tr>\n</thead><tbody>\n<tr>\n<td><code>+hidden</code></td>\n<td>none</td>\n<td>Totally hidden from screen readers and browsers</td>\n</tr>\n<tr>\n<td><code>+shown</code></td>\n<td>none</td>\n<td>Reverse the effects of hidden</td>\n</tr>\n<tr>\n<td><code>+visuallyhidden</code></td>\n<td>none</td>\n<td>Only visually hidden, still available to screen readers</td>\n</tr>\n<tr>\n<td><code>+visuallyshown</code></td>\n<td>none</td>\n<td>Reverse the settings applied by <code>.visuallyhidden</code></td>\n</tr>\n<tr>\n<td><code>+invisible</code></td>\n<td>none</td>\n<td>Hide visually and from screenreaders, but maintain layout</td>\n</tr>\n</tbody></table>\n",
          "title": "Visibility mixins"
        }
      ]
    },
    {
      "raw": "## Headings\nDefault heading elements. Showcases how to document a normal style.\n\n#### Usage:\n\n    <h1>Google hearts h1 headings, but only use one per page.</h1>\n    <h2>Got sections? Try using h2 headings.</h2>\n    <h3>Good things come in threes, like tacos and h3 headings.</h3>\n\n### `h3.alt`\nSecond sherpa block within the `headings.sass` file describing an alternate heading.\n\nDoes Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n#### Examples:\n\n    <h3 class=\"alt\">alternate</h3>\n",
      "markup": "<h2>Headings</h2>\n<br /><p>Default heading elements. Showcases how to document a normal style.</p>\n<br /><h4>Usage:</h4>\n<br /><pre><code>&lt;h1&gt;Google hearts h1 headings, but only use one per page.&lt;/h1&gt;\n&lt;h2&gt;Got sections? Try using h2 headings.&lt;/h2&gt;\n&lt;h3&gt;Good things come in threes, like tacos and h3 headings.&lt;/h3&gt;\n</code></pre>\n<br /><h3><code>h3.alt</code></h3>\n<br /><p>Second sherpa block within the <code>headings.sass</code> file describing an alternate heading.</p>\n<br /><p>Does Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n<br /><h4>Examples:</h4>\n<br /><pre><code>&lt;h3 class=&quot;alt&quot;&gt;alternate&lt;/h3&gt;\n</code></pre>\n",
      "title": "Headings",
      "template": "section.mustache",
      "filepath": "./test/fixtures/sass/base/headings.sass",
      "base_dir": "./test/fixtures/",
      "subnav": [
        "h3.alt"
      ],
      "blocks": [
        {
          "summary": "<h2>Headings</h2>\n<br /><p>Default heading elements. Showcases how to document a normal style.</p>\n",
          "usage": "<h4>Usage:</h4>\n<br /><pre><code>&lt;h1&gt;Google hearts h1 headings, but only use one per page.&lt;/h1&gt;\n&lt;h2&gt;Got sections? Try using h2 headings.&lt;/h2&gt;\n&lt;h3&gt;Good things come in threes, like tacos and h3 headings.&lt;/h3&gt;\n</code></pre>\n",
          "usage_showcase": "<h1>Google hearts h1 headings, but only use one per page.</h1>\n<h2>Got sections? Try using h2 headings.</h2>\n<h3>Good things come in threes, like tacos and h3 headings.</h3>",
          "title": "Headings"
        },
        {
          "summary": "<h3><code>h3.alt</code></h3>\n<br /><p>Second sherpa block within the <code>headings.sass</code> file describing an alternate heading.</p>\n<br /><p>Does Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n",
          "examples": "<h4>Examples:</h4>\n<br /><pre><code>&lt;h3 class=&quot;alt&quot;&gt;alternate&lt;/h3&gt;\n</code></pre>\n",
          "title": "h3.alt"
        }
      ]
    },
    {
      "raw": "## Links\nAs a convention, buttons should only be used for actions while hyperlinks are\nto be used for objects. For instance, \"Download\" should be a button while\n\"recent activity\" should be a link.\n\nThis is a lorem ipsum test: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation.\n\n#### States:\n\n- **:hover**    - When the mouse is located over the link.\n- **:visited**  - When a link has already been visited.\n- **:focus**    - When the element has keyboard focus.\n- **:active**   - When the mouse is pressed over the link.\n\n#### Usage:\n\n    <p>The anchor element defines a <a href=\"http://www.modeset.com/\">hyperlink</a>!</p>\n\n",
      "markup": "<h2>Links</h2>\n<br /><p>As a convention, buttons should only be used for actions while hyperlinks are\nto be used for objects. For instance, &quot;Download&quot; should be a button while\n&quot;recent activity&quot; should be a link.</p>\n<br /><p>This is a lorem ipsum test: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation.</p>\n<br /><h4>States:</h4>\n<br /><ul>\n<li><strong>:hover</strong>    - When the mouse is located over the link.</li>\n<li><strong>:visited</strong>  - When a link has already been visited.</li>\n<li><strong>:focus</strong>    - When the element has keyboard focus.</li>\n<li><strong>:active</strong>   - When the mouse is pressed over the link.</li>\n</ul>\n<br /><h4>Usage:</h4>\n<br /><pre><code>&lt;p&gt;The anchor element defines a &lt;a href=&quot;http://www.modeset.com/&quot;&gt;hyperlink&lt;/a&gt;!&lt;/p&gt;\n</code></pre>\n",
      "title": "Links",
      "template": "section.mustache",
      "filepath": "./test/fixtures/css/links.css",
      "base_dir": "./test/fixtures/",
      "subnav": [

      ],
      "blocks": [
        {
          "summary": "<h2>Links</h2>\n<br /><p>As a convention, buttons should only be used for actions while hyperlinks are\nto be used for objects. For instance, &quot;Download&quot; should be a button while\n&quot;recent activity&quot; should be a link.</p>\n<br /><p>This is a lorem ipsum test: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation.</p>\n",
          "states": "<h4>States:</h4>\n<br /><ul>\n<li><strong>:hover</strong>    - When the mouse is located over the link.</li>\n<li><strong>:visited</strong>  - When a link has already been visited.</li>\n<li><strong>:focus</strong>    - When the element has keyboard focus.</li>\n<li><strong>:active</strong>   - When the mouse is pressed over the link.</li>\n</ul>\n",
          "usage": "<h4>Usage:</h4>\n<br /><pre><code>&lt;p&gt;The anchor element defines a &lt;a href=&quot;http://www.modeset.com/&quot;&gt;hyperlink&lt;/a&gt;!&lt;/p&gt;\n</code></pre>\n",
          "usage_showcase": "<p>The anchor element defines a <a href=\"http://www.modeset.com/\">hyperlink</a>!</p>",
          "title": "Links"
        }
      ]
    },
    {
      "raw": "##  DimensionViewer\n\nDebugging tool for printing the `innerWidth` of the browser.\n\n#### Notes:\n\n- **Note!** Useful when creating styles associated with media queries.\n\n#### Warnings:\n\n- **Warning!** Useful when creating styles associated with media queries.\n\n#### Alerts:\n\n- **Alert!** Useful when creating styles associated with media queries.\n\n#### Examples:\n\n    @dimension_viewer = new DimensionViewer\n\n### `#initialize`\nGet this party started by instantiating a bunch of stuff\n\nStart me some Lorem ipsum dolor sit amet.\n\n    @dimension_viewer.initialize\n\n### `#dispose`\nEnd this party\n\n    @dimension_viewer.dispose\n",
      "markup": "<h2>DimensionViewer</h2>\n<br /><p>Debugging tool for printing the <code>innerWidth</code> of the browser.</p>\n<br /><h4>Notes:</h4>\n<br /><ul>\n<li><strong>Note!</strong> Useful when creating styles associated with media queries.</li>\n</ul>\n<br /><h4>Warnings:</h4>\n<br /><ul>\n<li><strong>Warning!</strong> Useful when creating styles associated with media queries.</li>\n</ul>\n<br /><h4>Alerts:</h4>\n<br /><ul>\n<li><strong>Alert!</strong> Useful when creating styles associated with media queries.</li>\n</ul>\n<br /><h4>Examples:</h4>\n<br /><pre><code>@dimension_viewer = new DimensionViewer\n</code></pre>\n<br /><h3><code>#initialize</code></h3>\n<br /><p>Get this party started by instantiating a bunch of stuff</p>\n<br /><p>Start me some Lorem ipsum dolor sit amet.</p>\n<br /><pre><code>@dimension_viewer.initialize\n</code></pre>\n<br /><h3><code>#dispose</code></h3>\n<br /><p>End this party</p>\n<br /><pre><code>@dimension_viewer.dispose\n</code></pre>\n",
      "title": "DimensionViewer",
      "template": "section.mustache",
      "filepath": "./test/fixtures/coffee/coffee.coffee",
      "base_dir": "./test/fixtures/",
      "subnav": [
        "initialize",
        "dispose"
      ],
      "blocks": [
        {
          "summary": "<h2>DimensionViewer</h2>\n<br /><p>Debugging tool for printing the <code>innerWidth</code> of the browser.</p>\n",
          "notes": "<h4>Notes:</h4>\n<br /><ul>\n<li><strong>Note!</strong> Useful when creating styles associated with media queries.</li>\n</ul>\n",
          "warnings": "<h4>Warnings:</h4>\n<br /><ul>\n<li><strong>Warning!</strong> Useful when creating styles associated with media queries.</li>\n</ul>\n",
          "alerts": "<h4>Alerts:</h4>\n<br /><ul>\n<li><strong>Alert!</strong> Useful when creating styles associated with media queries.</li>\n</ul>\n",
          "examples": "<h4>Examples:</h4>\n<br /><pre><code>@dimension_viewer = new DimensionViewer\n</code></pre>\n",
          "title": "DimensionViewer"
        },
        {
          "summary": "<h3><code>#initialize</code></h3>\n<br /><p>Get this party started by instantiating a bunch of stuff</p>\n<br /><p>Start me some Lorem ipsum dolor sit amet.</p>\n<br /><pre><code>@dimension_viewer.initialize\n</code></pre>\n",
          "title": "initialize"
        },
        {
          "summary": "<h3><code>#dispose</code></h3>\n<br /><p>End this party</p>\n<br /><pre><code>@dimension_viewer.dispose\n</code></pre>\n",
          "title": "dispose"
        }
      ]
    },
    {
      "raw": "##  GetImageSize\n\nThis file showcase the use of JavaDoc, multi line and single line sherpa blocks.\n\n#### Arguments:\n\n- src      - The path to the image requesting the size of\n- callback - The callback function to execute after obtaining the image size\n\n#### Examples:\n\n    var image_size = new GetImageSize('/images/image.png', gotImageSize);\n\n\n### `#requestImageSize`\nUses a multi line sherpa block\n\n    image_size.requestImageSize();\n\n\n### `#dispose`\nUses a single line sherpa block\n\n    image_size.dispose();\n",
      "markup": "<h2>GetImageSize</h2>\n<br /><p>This file showcase the use of JavaDoc, multi line and single line sherpa blocks.</p>\n<br /><h4>Arguments:</h4>\n<br /><ul>\n<li>src      - The path to the image requesting the size of</li>\n<li>callback - The callback function to execute after obtaining the image size</li>\n</ul>\n<br /><h4>Examples:</h4>\n<br /><pre><code>var image_size = new GetImageSize(&#39;/images/image.png&#39;, gotImageSize);\n</code></pre>\n<br /><h3><code>#requestImageSize</code></h3>\n<br /><p>Uses a multi line sherpa block</p>\n<br /><pre><code>image_size.requestImageSize();\n</code></pre>\n<br /><h3><code>#dispose</code></h3>\n<br /><p>Uses a single line sherpa block</p>\n<br /><pre><code>image_size.dispose();\n</code></pre>\n",
      "title": "GetImageSize",
      "template": "section.mustache",
      "filepath": "./test/fixtures/javascript/javascript.js",
      "base_dir": "./test/fixtures/",
      "subnav": [
        "requestImageSize",
        "dispose"
      ],
      "blocks": [
        {
          "summary": "<h2>GetImageSize</h2>\n<br /><p>This file showcase the use of JavaDoc, multi line and single line sherpa blocks.</p>\n",
          "arguments": "<h4>Arguments:</h4>\n<br /><ul>\n<li>src      - The path to the image requesting the size of</li>\n<li>callback - The callback function to execute after obtaining the image size</li>\n</ul>\n",
          "examples": "<h4>Examples:</h4>\n<br /><pre><code>var image_size = new GetImageSize(&#39;/images/image.png&#39;, gotImageSize);\n</code></pre>\n",
          "title": "GetImageSize"
        },
        {
          "summary": "<h3><code>#requestImageSize</code></h3>\n<br /><p>Uses a multi line sherpa block</p>\n<br /><pre><code>image_size.requestImageSize();\n</code></pre>\n",
          "title": "requestImageSize"
        },
        {
          "summary": "<h3><code>#dispose</code></h3>\n<br /><p>Uses a single line sherpa block</p>\n<br /><pre><code>image_size.dispose();\n</code></pre>\n",
          "title": "dispose"
        }
      ]
    },
    {
      "raw": "## Ruby\nSuper simple Ruby file using the `#` symbol for comment markers.\n\n#### Alerts:\n\n- **Alert!** Don't run with scissors.\n\n#### Examples:\n\n    @parser = Sherpa::Parser.new\n\n    ## parses the file...\n    @parser.parse file\n\n",
      "markup": "<h2>Ruby</h2>\n<br /><p>Super simple Ruby file using the <code>#</code> symbol for comment markers.</p>\n<br /><h4>Alerts:</h4>\n<br /><ul>\n<li><strong>Alert!</strong> Don&#39;t run with scissors.</li>\n</ul>\n<br /><h4>Examples:</h4>\n<br /><pre><code>@parser = Sherpa::Parser.new\n<br />## parses the file...\n@parser.parse file\n</code></pre>\n",
      "title": "Ruby",
      "template": "section.mustache",
      "filepath": "./test/fixtures/ruby/ruby.rb",
      "base_dir": "./test/fixtures/",
      "subnav": [

      ],
      "blocks": [
        {
          "summary": "<h2>Ruby</h2>\n<br /><p>Super simple Ruby file using the <code>#</code> symbol for comment markers.</p>\n",
          "alerts": "<h4>Alerts:</h4>\n<br /><ul>\n<li><strong>Alert!</strong> Don&#39;t run with scissors.</li>\n</ul>\n",
          "examples": "<h4>Examples:</h4>\n<br /><pre><code>@parser = Sherpa::Parser.new\n<br />## parses the file...\n@parser.parse file\n</code></pre>\n",
          "title": "Ruby"
        }
      ]
    },
    {
      "raw": "\n## Markdown Test File\n\nThis is a test markdown file, it should always use the raw template.\n\n",
      "markup": "<h2>Markdown Test File</h2>\n<br /><p>This is a test markdown file, it should always use the raw template.</p>\n",
      "title": "Markdown",
      "template": "raw.mustache",
      "filepath": "./test/fixtures/markdown/markdown.md",
      "base_dir": "./test/fixtures/",
      "subnav": [

      ],
      "blocks": [

      ]
    }
  ],
  "globs": [
    {
      "raw": "## Headings\nDefault heading elements. Showcases how to document a normal style.\n\n#### Usage:\n\n    <h1>Google hearts h1 headings, but only use one per page.</h1>\n    <h2>Got sections? Try using h2 headings.</h2>\n    <h3>Good things come in threes, like tacos and h3 headings.</h3>\n\n### `h3.alt`\nSecond sherpa block within the `headings.sass` file describing an alternate heading.\n\nDoes Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n#### Examples:\n\n    <h3 class=\"alt\">alternate</h3>\n",
      "markup": "<h2>Headings</h2>\n<br /><p>Default heading elements. Showcases how to document a normal style.</p>\n<br /><h4>Usage:</h4>\n<br /><pre><code>&lt;h1&gt;Google hearts h1 headings, but only use one per page.&lt;/h1&gt;\n&lt;h2&gt;Got sections? Try using h2 headings.&lt;/h2&gt;\n&lt;h3&gt;Good things come in threes, like tacos and h3 headings.&lt;/h3&gt;\n</code></pre>\n<br /><h3><code>h3.alt</code></h3>\n<br /><p>Second sherpa block within the <code>headings.sass</code> file describing an alternate heading.</p>\n<br /><p>Does Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n<br /><h4>Examples:</h4>\n<br /><pre><code>&lt;h3 class=&quot;alt&quot;&gt;alternate&lt;/h3&gt;\n</code></pre>\n",
      "title": "Headings",
      "template": "section.mustache",
      "filepath": "./test/fixtures/sass/base/headings.sass",
      "base_dir": "./test/fixtures/",
      "subnav": [
        "h3.alt"
      ],
      "blocks": [
        {
          "summary": "<h2>Headings</h2>\n<br /><p>Default heading elements. Showcases how to document a normal style.</p>\n",
          "usage": "<h4>Usage:</h4>\n<br /><pre><code>&lt;h1&gt;Google hearts h1 headings, but only use one per page.&lt;/h1&gt;\n&lt;h2&gt;Got sections? Try using h2 headings.&lt;/h2&gt;\n&lt;h3&gt;Good things come in threes, like tacos and h3 headings.&lt;/h3&gt;\n</code></pre>\n",
          "usage_showcase": "<h1>Google hearts h1 headings, but only use one per page.</h1>\n<h2>Got sections? Try using h2 headings.</h2>\n<h3>Good things come in threes, like tacos and h3 headings.</h3>",
          "title": "Headings"
        },
        {
          "summary": "<h3><code>h3.alt</code></h3>\n<br /><p>Second sherpa block within the <code>headings.sass</code> file describing an alternate heading.</p>\n<br /><p>Does Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n",
          "examples": "<h4>Examples:</h4>\n<br /><pre><code>&lt;h3 class=&quot;alt&quot;&gt;alternate&lt;/h3&gt;\n</code></pre>\n",
          "title": "h3.alt"
        }
      ]
    },
    {
      "raw": "## Font-size\nUse `rems` to insert a font size with a pixel fallback.\nThis showcases how you might create a mixin block.\n\n#### Arguments:\n\n- `$target_px`              - The target font size in pixels\n- `$context:$context_px`    - [_Optional_] The context constraints of the user's base font size\n\n#### Notes:\n\n- **Heads Up!** Make sure not to include the `px`\n\n#### Examples:\n\n    h1\n      +font-size(48)\n",
      "markup": "<h2>Font-size</h2>\n<br /><p>Use <code>rems</code> to insert a font size with a pixel fallback.\nThis showcases how you might create a mixin block.</p>\n<br /><h4>Arguments:</h4>\n<br /><ul>\n<li><code>$target_px</code>              - The target font size in pixels</li>\n<li><code>$context:$context_px</code>    - [<em>Optional</em>] The context constraints of the user&#39;s base font size</li>\n</ul>\n<br /><h4>Notes:</h4>\n<br /><ul>\n<li><strong>Heads Up!</strong> Make sure not to include the <code>px</code></li>\n</ul>\n<br /><h4>Examples:</h4>\n<br /><pre><code>h1\n  +font-size(48)\n</code></pre>\n",
      "title": "Font-size",
      "template": "section.mustache",
      "filepath": "./test/fixtures/sass/mixins/font-size.sass",
      "base_dir": "./test/fixtures/",
      "subnav": [

      ],
      "blocks": [
        {
          "summary": "<h2>Font-size</h2>\n<br /><p>Use <code>rems</code> to insert a font size with a pixel fallback.\nThis showcases how you might create a mixin block.</p>\n",
          "arguments": "<h4>Arguments:</h4>\n<br /><ul>\n<li><code>$target_px</code>              - The target font size in pixels</li>\n<li><code>$context:$context_px</code>    - [<em>Optional</em>] The context constraints of the user&#39;s base font size</li>\n</ul>\n",
          "notes": "<h4>Notes:</h4>\n<br /><ul>\n<li><strong>Heads Up!</strong> Make sure not to include the <code>px</code></li>\n</ul>\n",
          "examples": "<h4>Examples:</h4>\n<br /><pre><code>h1\n  +font-size(48)\n</code></pre>\n",
          "title": "Font-size"
        }
      ]
    },
    {
      "raw": "##  Visibility mixins\n\nMixin            |Params|Usage\n-----------------|------|----------------------------------------------\n`+hidden`        |none  |Totally hidden from screen readers and browsers\n`+shown`         |none  |Reverse the effects of hidden\n`+visuallyhidden`|none  |Only visually hidden, still available to screen readers\n`+visuallyshown` |none  |Reverse the settings applied by `.visuallyhidden`\n`+invisible`     |none  |Hide visually and from screenreaders, but maintain layout\n",
      "markup": "<h2>Visibility mixins</h2>\n<br /><table><thead>\n<tr>\n<th>Mixin</th>\n<th>Params</th>\n<th>Usage</th>\n</tr>\n</thead><tbody>\n<tr>\n<td><code>+hidden</code></td>\n<td>none</td>\n<td>Totally hidden from screen readers and browsers</td>\n</tr>\n<tr>\n<td><code>+shown</code></td>\n<td>none</td>\n<td>Reverse the effects of hidden</td>\n</tr>\n<tr>\n<td><code>+visuallyhidden</code></td>\n<td>none</td>\n<td>Only visually hidden, still available to screen readers</td>\n</tr>\n<tr>\n<td><code>+visuallyshown</code></td>\n<td>none</td>\n<td>Reverse the settings applied by <code>.visuallyhidden</code></td>\n</tr>\n<tr>\n<td><code>+invisible</code></td>\n<td>none</td>\n<td>Hide visually and from screenreaders, but maintain layout</td>\n</tr>\n</tbody></table>\n",
      "title": "Visibility mixins",
      "template": "section.mustache",
      "filepath": "./test/fixtures/sass/visibility.sass",
      "base_dir": "./test/fixtures/",
      "subnav": [

      ],
      "blocks": [
        {
          "summary": "<h2>Visibility mixins</h2>\n<br /><table><thead>\n<tr>\n<th>Mixin</th>\n<th>Params</th>\n<th>Usage</th>\n</tr>\n</thead><tbody>\n<tr>\n<td><code>+hidden</code></td>\n<td>none</td>\n<td>Totally hidden from screen readers and browsers</td>\n</tr>\n<tr>\n<td><code>+shown</code></td>\n<td>none</td>\n<td>Reverse the effects of hidden</td>\n</tr>\n<tr>\n<td><code>+visuallyhidden</code></td>\n<td>none</td>\n<td>Only visually hidden, still available to screen readers</td>\n</tr>\n<tr>\n<td><code>+visuallyshown</code></td>\n<td>none</td>\n<td>Reverse the settings applied by <code>.visuallyhidden</code></td>\n</tr>\n<tr>\n<td><code>+invisible</code></td>\n<td>none</td>\n<td>Hide visually and from screenreaders, but maintain layout</td>\n</tr>\n</tbody></table>\n",
          "title": "Visibility mixins"
        }
      ]
    },
    {
      "raw": "##  GetImageSize\n\nThis file showcase the use of JavaDoc, multi line and single line sherpa blocks.\n\n#### Arguments:\n\n- src      - The path to the image requesting the size of\n- callback - The callback function to execute after obtaining the image size\n\n#### Examples:\n\n    var image_size = new GetImageSize('/images/image.png', gotImageSize);\n\n\n### `#requestImageSize`\nUses a multi line sherpa block\n\n    image_size.requestImageSize();\n\n\n### `#dispose`\nUses a single line sherpa block\n\n    image_size.dispose();\n",
      "markup": "<h2>GetImageSize</h2>\n<br /><p>This file showcase the use of JavaDoc, multi line and single line sherpa blocks.</p>\n<br /><h4>Arguments:</h4>\n<br /><ul>\n<li>src      - The path to the image requesting the size of</li>\n<li>callback - The callback function to execute after obtaining the image size</li>\n</ul>\n<br /><h4>Examples:</h4>\n<br /><pre><code>var image_size = new GetImageSize(&#39;/images/image.png&#39;, gotImageSize);\n</code></pre>\n<br /><h3><code>#requestImageSize</code></h3>\n<br /><p>Uses a multi line sherpa block</p>\n<br /><pre><code>image_size.requestImageSize();\n</code></pre>\n<br /><h3><code>#dispose</code></h3>\n<br /><p>Uses a single line sherpa block</p>\n<br /><pre><code>image_size.dispose();\n</code></pre>\n",
      "title": "GetImageSize",
      "template": "section.mustache",
      "filepath": "./test/fixtures/javascript/javascript.js",
      "base_dir": "./test/fixtures/",
      "subnav": [
        "requestImageSize",
        "dispose"
      ],
      "blocks": [
        {
          "summary": "<h2>GetImageSize</h2>\n<br /><p>This file showcase the use of JavaDoc, multi line and single line sherpa blocks.</p>\n",
          "arguments": "<h4>Arguments:</h4>\n<br /><ul>\n<li>src      - The path to the image requesting the size of</li>\n<li>callback - The callback function to execute after obtaining the image size</li>\n</ul>\n",
          "examples": "<h4>Examples:</h4>\n<br /><pre><code>var image_size = new GetImageSize(&#39;/images/image.png&#39;, gotImageSize);\n</code></pre>\n",
          "title": "GetImageSize"
        },
        {
          "summary": "<h3><code>#requestImageSize</code></h3>\n<br /><p>Uses a multi line sherpa block</p>\n<br /><pre><code>image_size.requestImageSize();\n</code></pre>\n",
          "title": "requestImageSize"
        },
        {
          "summary": "<h3><code>#dispose</code></h3>\n<br /><p>Uses a single line sherpa block</p>\n<br /><pre><code>image_size.dispose();\n</code></pre>\n",
          "title": "dispose"
        }
      ]
    },
    {
      "raw": "##  DimensionViewer\n\nDebugging tool for printing the `innerWidth` of the browser.\n\n#### Notes:\n\n- **Note!** Useful when creating styles associated with media queries.\n\n#### Warnings:\n\n- **Warning!** Useful when creating styles associated with media queries.\n\n#### Alerts:\n\n- **Alert!** Useful when creating styles associated with media queries.\n\n#### Examples:\n\n    @dimension_viewer = new DimensionViewer\n\n### `#initialize`\nGet this party started by instantiating a bunch of stuff\n\nStart me some Lorem ipsum dolor sit amet.\n\n    @dimension_viewer.initialize\n\n### `#dispose`\nEnd this party\n\n    @dimension_viewer.dispose\n",
      "markup": "<h2>DimensionViewer</h2>\n<br /><p>Debugging tool for printing the <code>innerWidth</code> of the browser.</p>\n<br /><h4>Notes:</h4>\n<br /><ul>\n<li><strong>Note!</strong> Useful when creating styles associated with media queries.</li>\n</ul>\n<br /><h4>Warnings:</h4>\n<br /><ul>\n<li><strong>Warning!</strong> Useful when creating styles associated with media queries.</li>\n</ul>\n<br /><h4>Alerts:</h4>\n<br /><ul>\n<li><strong>Alert!</strong> Useful when creating styles associated with media queries.</li>\n</ul>\n<br /><h4>Examples:</h4>\n<br /><pre><code>@dimension_viewer = new DimensionViewer\n</code></pre>\n<br /><h3><code>#initialize</code></h3>\n<br /><p>Get this party started by instantiating a bunch of stuff</p>\n<br /><p>Start me some Lorem ipsum dolor sit amet.</p>\n<br /><pre><code>@dimension_viewer.initialize\n</code></pre>\n<br /><h3><code>#dispose</code></h3>\n<br /><p>End this party</p>\n<br /><pre><code>@dimension_viewer.dispose\n</code></pre>\n",
      "title": "DimensionViewer",
      "template": "section.mustache",
      "filepath": "./test/fixtures/coffee/coffee.coffee",
      "base_dir": "./test/fixtures/",
      "subnav": [
        "initialize",
        "dispose"
      ],
      "blocks": [
        {
          "summary": "<h2>DimensionViewer</h2>\n<br /><p>Debugging tool for printing the <code>innerWidth</code> of the browser.</p>\n",
          "notes": "<h4>Notes:</h4>\n<br /><ul>\n<li><strong>Note!</strong> Useful when creating styles associated with media queries.</li>\n</ul>\n",
          "warnings": "<h4>Warnings:</h4>\n<br /><ul>\n<li><strong>Warning!</strong> Useful when creating styles associated with media queries.</li>\n</ul>\n",
          "alerts": "<h4>Alerts:</h4>\n<br /><ul>\n<li><strong>Alert!</strong> Useful when creating styles associated with media queries.</li>\n</ul>\n",
          "examples": "<h4>Examples:</h4>\n<br /><pre><code>@dimension_viewer = new DimensionViewer\n</code></pre>\n",
          "title": "DimensionViewer"
        },
        {
          "summary": "<h3><code>#initialize</code></h3>\n<br /><p>Get this party started by instantiating a bunch of stuff</p>\n<br /><p>Start me some Lorem ipsum dolor sit amet.</p>\n<br /><pre><code>@dimension_viewer.initialize\n</code></pre>\n",
          "title": "initialize"
        },
        {
          "summary": "<h3><code>#dispose</code></h3>\n<br /><p>End this party</p>\n<br /><pre><code>@dimension_viewer.dispose\n</code></pre>\n",
          "title": "dispose"
        }
      ]
    },
    {
      "raw": "\n## Markdown Test File\n\nThis is a test markdown file, it should always use the raw template.\n\n",
      "markup": "<h2>Markdown Test File</h2>\n<br /><p>This is a test markdown file, it should always use the raw template.</p>\n",
      "title": "Markdown",
      "template": "raw.mustache",
      "filepath": "./test/fixtures/markdown/markdown.md",
      "base_dir": "./test/fixtures/",
      "subnav": [

      ],
      "blocks": [

      ]
    },
    {
      "raw": "## Links\nAs a convention, buttons should only be used for actions while hyperlinks are\nto be used for objects. For instance, \"Download\" should be a button while\n\"recent activity\" should be a link.\n\nThis is a lorem ipsum test: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation.\n\n#### States:\n\n- **:hover**    - When the mouse is located over the link.\n- **:visited**  - When a link has already been visited.\n- **:focus**    - When the element has keyboard focus.\n- **:active**   - When the mouse is pressed over the link.\n\n#### Usage:\n\n    <p>The anchor element defines a <a href=\"http://www.modeset.com/\">hyperlink</a>!</p>\n\n",
      "markup": "<h2>Links</h2>\n<br /><p>As a convention, buttons should only be used for actions while hyperlinks are\nto be used for objects. For instance, &quot;Download&quot; should be a button while\n&quot;recent activity&quot; should be a link.</p>\n<br /><p>This is a lorem ipsum test: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation.</p>\n<br /><h4>States:</h4>\n<br /><ul>\n<li><strong>:hover</strong>    - When the mouse is located over the link.</li>\n<li><strong>:visited</strong>  - When a link has already been visited.</li>\n<li><strong>:focus</strong>    - When the element has keyboard focus.</li>\n<li><strong>:active</strong>   - When the mouse is pressed over the link.</li>\n</ul>\n<br /><h4>Usage:</h4>\n<br /><pre><code>&lt;p&gt;The anchor element defines a &lt;a href=&quot;http://www.modeset.com/&quot;&gt;hyperlink&lt;/a&gt;!&lt;/p&gt;\n</code></pre>\n",
      "title": "Links",
      "template": "section.mustache",
      "filepath": "./test/fixtures/css/links.css",
      "base_dir": "./test/fixtures/",
      "subnav": [

      ],
      "blocks": [
        {
          "summary": "<h2>Links</h2>\n<br /><p>As a convention, buttons should only be used for actions while hyperlinks are\nto be used for objects. For instance, &quot;Download&quot; should be a button while\n&quot;recent activity&quot; should be a link.</p>\n<br /><p>This is a lorem ipsum test: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation.</p>\n",
          "states": "<h4>States:</h4>\n<br /><ul>\n<li><strong>:hover</strong>    - When the mouse is located over the link.</li>\n<li><strong>:visited</strong>  - When a link has already been visited.</li>\n<li><strong>:focus</strong>    - When the element has keyboard focus.</li>\n<li><strong>:active</strong>   - When the mouse is pressed over the link.</li>\n</ul>\n",
          "usage": "<h4>Usage:</h4>\n<br /><pre><code>&lt;p&gt;The anchor element defines a &lt;a href=&quot;http://www.modeset.com/&quot;&gt;hyperlink&lt;/a&gt;!&lt;/p&gt;\n</code></pre>\n",
          "usage_showcase": "<p>The anchor element defines a <a href=\"http://www.modeset.com/\">hyperlink</a>!</p>",
          "title": "Links"
        }
      ]
    },
    {
      "raw": "## Headings\nDefault heading elements. Showcases how to document a normal style.\n\n#### Usage:\n\n    <h1>Google hearts h1 headings, but only use one per page.</h1>\n    <h2>Got sections? Try using h2 headings.</h2>\n    <h3>Good things come in threes, like tacos and h3 headings.</h3>\n\n### `h3.alt`\nSecond sherpa block within the `headings.sass` file describing an alternate heading.\n\nDoes Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n#### Examples:\n\n    <h3 class=\"alt\">alternate</h3>\n",
      "markup": "<h2>Headings</h2>\n<br /><p>Default heading elements. Showcases how to document a normal style.</p>\n<br /><h4>Usage:</h4>\n<br /><pre><code>&lt;h1&gt;Google hearts h1 headings, but only use one per page.&lt;/h1&gt;\n&lt;h2&gt;Got sections? Try using h2 headings.&lt;/h2&gt;\n&lt;h3&gt;Good things come in threes, like tacos and h3 headings.&lt;/h3&gt;\n</code></pre>\n<br /><h3><code>h3.alt</code></h3>\n<br /><p>Second sherpa block within the <code>headings.sass</code> file describing an alternate heading.</p>\n<br /><p>Does Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n<br /><h4>Examples:</h4>\n<br /><pre><code>&lt;h3 class=&quot;alt&quot;&gt;alternate&lt;/h3&gt;\n</code></pre>\n",
      "title": "Headings",
      "template": "section.mustache",
      "filepath": "./test/fixtures/sass/base/headings.sass",
      "base_dir": "./test/fixtures/",
      "subnav": [
        "h3.alt"
      ],
      "blocks": [
        {
          "summary": "<h2>Headings</h2>\n<br /><p>Default heading elements. Showcases how to document a normal style.</p>\n",
          "usage": "<h4>Usage:</h4>\n<br /><pre><code>&lt;h1&gt;Google hearts h1 headings, but only use one per page.&lt;/h1&gt;\n&lt;h2&gt;Got sections? Try using h2 headings.&lt;/h2&gt;\n&lt;h3&gt;Good things come in threes, like tacos and h3 headings.&lt;/h3&gt;\n</code></pre>\n",
          "usage_showcase": "<h1>Google hearts h1 headings, but only use one per page.</h1>\n<h2>Got sections? Try using h2 headings.</h2>\n<h3>Good things come in threes, like tacos and h3 headings.</h3>",
          "title": "Headings"
        },
        {
          "summary": "<h3><code>h3.alt</code></h3>\n<br /><p>Second sherpa block within the <code>headings.sass</code> file describing an alternate heading.</p>\n<br /><p>Does Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n",
          "examples": "<h4>Examples:</h4>\n<br /><pre><code>&lt;h3 class=&quot;alt&quot;&gt;alternate&lt;/h3&gt;\n</code></pre>\n",
          "title": "h3.alt"
        }
      ]
    },
    {
      "raw": "## Ruby\nSuper simple Ruby file using the `#` symbol for comment markers.\n\n#### Alerts:\n\n- **Alert!** Don't run with scissors.\n\n#### Examples:\n\n    @parser = Sherpa::Parser.new\n\n    ## parses the file...\n    @parser.parse file\n\n",
      "markup": "<h2>Ruby</h2>\n<br /><p>Super simple Ruby file using the <code>#</code> symbol for comment markers.</p>\n<br /><h4>Alerts:</h4>\n<br /><ul>\n<li><strong>Alert!</strong> Don&#39;t run with scissors.</li>\n</ul>\n<br /><h4>Examples:</h4>\n<br /><pre><code>@parser = Sherpa::Parser.new\n<br />## parses the file...\n@parser.parse file\n</code></pre>\n",
      "title": "Ruby",
      "template": "section.mustache",
      "filepath": "./test/fixtures/ruby/ruby.rb",
      "base_dir": "./test/fixtures/",
      "subnav": [

      ],
      "blocks": [
        {
          "summary": "<h2>Ruby</h2>\n<br /><p>Super simple Ruby file using the <code>#</code> symbol for comment markers.</p>\n",
          "alerts": "<h4>Alerts:</h4>\n<br /><ul>\n<li><strong>Alert!</strong> Don&#39;t run with scissors.</li>\n</ul>\n",
          "examples": "<h4>Examples:</h4>\n<br /><pre><code>@parser = Sherpa::Parser.new\n<br />## parses the file...\n@parser.parse file\n</code></pre>\n",
          "title": "Ruby"
        }
      ]
    }
  ]
}